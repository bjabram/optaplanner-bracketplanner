package com.redhat.rhc.marchmadness.solver;

dialect "mvel"

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder

import bracketplanner.domain.Bracket;
import bracketplanner.domain.Seeding;
import bracketplanner.domain.Site;
import bracketplanner.domain.Team;

global HardMediumSoftScoreHolder scoreHolder;

// ############################################################################
// Hard Rules
// These must be satisfied to ensure a conforming bracket
// ############################################################################

rule "Team used more than once"
when
	// Check two seedings with same team - no nulls
	$team: Team()
	$seedingA: Seeding(team == $team)
	$seedingB: Seeding(team == $team, this != $seedingA)
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Pod sites for same pod number"
when
	$podSiteA: Site()
	$podSiteB: Site(this != $podSiteA)
	$seedingA: Seeding($pod: pod, podSite == $podSiteA)
	$seedingB: Seeding(pod == $pod, podSite == $podSiteB)
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end


// ############################################################################
// Medium scores
// These rules are dictated by the selection committee
// ############################################################################
rule "Team cannot play at own host site"
when
	$team: Team($name: name)
	$podSite: Site(hostTeamName == $name)
	$seeding: Seeding(team == $team, podSite == $podSite)
then
    scoreHolder.addMediumConstraintMatch(kcontext, -1);
end

rule "Team cannot play at own regional site"
when
	$team: Team($name: name)
	$seeding: Seeding(team == $team, regionalSite.hostTeamName == $name)
then
    scoreHolder.addMediumConstraintMatch(kcontext, -1);
end
	
rule "Teams in same conference cannot play in first round"
when
	$teamA: Team($conference: conference)
	$teamB: Team(conference == $conference, this != $teamA)
	$seedingA: Seeding(team == $teamA, $seedA: seed, $site: podSite)
	$seedingB: Seeding(team == $teamB, seed == 17 - $seedA, podSite == $site)
then
    scoreHolder.addMediumConstraintMatch(kcontext, -1);
end

rule "Top three teams in conference play in separate regions"
when
	$teamA: Team($conference: conference, rankInConference <= 3)
	$teamB: Team(conference == $conference, rankInConference <= 3, this != $teamA)
	$seedingA: Seeding(team == $teamA, $regionalSite: regionalSite)
	$seedingB: Seeding(team == $teamB, regionalSite == $regionalSite)
then
    scoreHolder.addMediumConstraintMatch(kcontext, -1)
end

rule "Top four seeds must be #1 seeds"
when
	$team: Team(expectedSeed != 1)
    Seeding(team == $team, seed == 1)
then
    scoreHolder.addMediumConstraintMatch(kcontext, -1)
end
	

// ############################################################################
// Soft scores
// These rules tune the final bracket for optimization
// ############################################################################

// Distance is one point per mile away from venue, then multiply by the quadrant of the team
// to prioritize higher-ranked teams.  For seeds 1-4 multiply by 4 to make it bad for high
// ranked teams to play further away.
rule "Team distance from pod site"
when
	$team: Team($expectedSeed: expectedSeed)
	$podSite: Site()
	$seeding: Seeding(team == $team, $seed: seed, podSite == $podSite, $distance: distanceToPodSite)
then
    scoreHolder.addSoftConstraintMatch(kcontext, -1 * $distance * ((17 - $seed) / 4));
end

// Distance is two points per mile away from venue
rule "Team distance from regional site"
when
	$team: Team($expectedSeed: expectedSeed)
	$seeding: Seeding(team == $team, $seed: seed, $regionalSite: regionalSite, $distance: distanceToRegionalSite)
then
    scoreHolder.addSoftConstraintMatch(kcontext, -2 * $distance * ((17 - $seed) / 4));
end

// Okay if 8 becomes a 9 seed, but not if 1 becomes a 2 seed
rule "Team distance from expected seed"
when
	$team : Team($expectedSeed: expectedSeed)
	$seeding : Seeding(team == $team, $actualSeed: seed)
then
    scoreHolder.addSoftConstraintMatch(kcontext, -250 * (Math.abs(17 - $actualSeed * 2)) * Math.abs($expectedSeed - $actualSeed));
end
